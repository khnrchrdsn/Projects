letter_to_number = {
    'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7,
    'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13,
    'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19,
    't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26
}

number_to_letter = {v: k for k, v in letter_to_number.items()}

plaintext = input("Enter the text you want to encrypt: ")
key = input("Enter the key you want to encrypt your plaintext with: ")


plaintext_length = len(plaintext)
key_length = len(key)


extended_key = key * (plaintext_length // key_length) + key[:plaintext_length % key_length]
encrypted_key = extended_key

plaintext_numbers = [letter_to_number.get(letter, 0) for letter in plaintext.lower()]
extended_key_numbers = [letter_to_number.get(letter, 0) for letter in extended_key.lower()]

print("Numerical counterparts of the plaintext:", plaintext_numbers)
print("Numerical counterparts of the extended key:", extended_key_numbers)

encrypted_numbers = [(p + k) % 26 for p, k in zip(plaintext_numbers, extended_key_numbers)]


encrypted_message = ''
for number in encrypted_numbers:
    if number == 0:
        letter = 'z'
    else:
        letter = number_to_letter[number]
    encrypted_message += letter


print("Encrypted message:", encrypted_message)







Refurbished Code:









def vigenere_encrypt(plaintext, key):
    ciphertext = ""
    key_index = 0
    for char in plaintext:
        if char.isalpha():
            # convert character to a number 0-25
            char_num = ord(char.lower()) - 97
            key_num = ord(key[key_index % len(key)].lower()) - 97
            # add the key number to the character number
            cipher_num = (char_num + key_num) % 26
            # convert the cipher number back to a character
            cipher_char = chr(cipher_num + 97)
            # add the cipher character to the ciphertext
            ciphertext += cipher_char
            key_index += 1
        else:
            ciphertext += char
    return ciphertext
    
